// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote.proto

package remote

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}

func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{0}
}

type UploadStatus struct {
	Message              string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=remote.UploadStatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadStatus) Reset()         { *m = UploadStatus{} }
func (m *UploadStatus) String() string { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()    {}
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{0}
}

func (m *UploadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadStatus.Unmarshal(m, b)
}
func (m *UploadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadStatus.Marshal(b, m, deterministic)
}
func (m *UploadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadStatus.Merge(m, src)
}
func (m *UploadStatus) XXX_Size() int {
	return xxx_messageInfo_UploadStatus.Size(m)
}
func (m *UploadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UploadStatus proto.InternalMessageInfo

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

type Files struct {
	Files                []string `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Files) Reset()         { *m = Files{} }
func (m *Files) String() string { return proto.CompactTextString(m) }
func (*Files) ProtoMessage()    {}
func (*Files) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{1}
}

func (m *Files) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Files.Unmarshal(m, b)
}
func (m *Files) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Files.Marshal(b, m, deterministic)
}
func (m *Files) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Files.Merge(m, src)
}
func (m *Files) XXX_Size() int {
	return xxx_messageInfo_Files.Size(m)
}
func (m *Files) XXX_DiscardUnknown() {
	xxx_messageInfo_Files.DiscardUnknown(m)
}

var xxx_messageInfo_Files proto.InternalMessageInfo

func (m *Files) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{2}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterEnum("remote.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
	proto.RegisterType((*UploadStatus)(nil), "remote.UploadStatus")
	proto.RegisterType((*Files)(nil), "remote.Files")
	proto.RegisterType((*Chunk)(nil), "remote.Chunk")
}

func init() { proto.RegisterFile("remote.proto", fileDescriptor_eefc82927d57d89b) }

var fileDescriptor_eefc82927d57d89b = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0xd1, 0x6e, 0xed, 0x18, 0x25, 0x0c, 0x3d, 0x2c, 0x82, 0x10, 0x73, 0x0a, 0x22,
	0x05, 0xd3, 0xb3, 0xa7, 0x48, 0x6f, 0x22, 0x44, 0xe2, 0x7d, 0x25, 0x83, 0x96, 0xa4, 0x3b, 0x21,
	0xbb, 0xa5, 0x7f, 0x5f, 0xba, 0x9b, 0x80, 0x48, 0x6f, 0xef, 0x63, 0x77, 0xde, 0x7b, 0x33, 0x10,
	0x0f, 0xb4, 0x67, 0x47, 0xeb, 0x7e, 0x60, 0xc7, 0x28, 0x03, 0x65, 0x9f, 0x10, 0xd7, 0x7d, 0xc7,
	0xba, 0xf9, 0x70, 0xda, 0x1d, 0x2c, 0x2a, 0x58, 0xbc, 0x91, 0xb5, 0xfa, 0x9b, 0x94, 0x48, 0x45,
	0xbe, 0xac, 0x26, 0xc4, 0x27, 0xb8, 0x2c, 0xb9, 0x21, 0x15, 0xa5, 0x22, 0xbf, 0x2d, 0xd4, 0x7a,
	0xb4, 0xfb, 0x3b, 0x7d, 0x7a, 0xaf, 0xfc, 0xaf, 0xec, 0x1e, 0xe6, 0xdb, 0x5d, 0x47, 0x16, 0x57,
	0xa3, 0x50, 0x22, 0xbd, 0xc8, 0x97, 0x55, 0x80, 0xec, 0x01, 0xe6, 0xe5, 0xcf, 0xc1, 0xb4, 0xa7,
	0xbc, 0x92, 0x8d, 0x23, 0xe3, 0x7c, 0x5e, 0x5c, 0x4d, 0xf8, 0xb8, 0x81, 0xe4, 0xbf, 0x37, 0x5e,
	0xc3, 0xa2, 0x36, 0xad, 0xe1, 0xa3, 0x49, 0x66, 0x28, 0x21, 0x7a, 0x6f, 0x13, 0x81, 0x00, 0x72,
	0xab, 0x77, 0x1d, 0x35, 0x49, 0x54, 0xc4, 0x00, 0xaf, 0x7c, 0x34, 0xd6, 0x0d, 0xa4, 0xf7, 0xc5,
	0x0b, 0x5c, 0xd5, 0x7d, 0xd0, 0xf8, 0x0c, 0x32, 0xd8, 0xe1, 0xcd, 0x54, 0xdd, 0x37, 0xb8, 0x5b,
	0x9d, 0xdb, 0x24, 0x9b, 0xe5, 0xe2, 0x4b, 0xfa, 0x53, 0x6d, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xa1, 0xb9, 0xf1, 0x0d, 0x3a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DownstreamClient is the client API for Downstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DownstreamClient interface {
}

type downstreamClient struct {
	cc *grpc.ClientConn
}

func NewDownstreamClient(cc *grpc.ClientConn) DownstreamClient {
	return &downstreamClient{cc}
}

// DownstreamServer is the server API for Downstream service.
type DownstreamServer interface {
}

func RegisterDownstreamServer(s *grpc.Server, srv DownstreamServer) {
	s.RegisterService(&_Downstream_serviceDesc, srv)
}

var _Downstream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Downstream",
	HandlerType: (*DownstreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "remote.proto",
}

// UpstreamClient is the client API for Upstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpstreamClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Upstream_UploadClient, error)
}

type upstreamClient struct {
	cc *grpc.ClientConn
}

func NewUpstreamClient(cc *grpc.ClientConn) UpstreamClient {
	return &upstreamClient{cc}
}

func (c *upstreamClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Upstream_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Upstream_serviceDesc.Streams[0], "/remote.Upstream/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamUploadClient{stream}
	return x, nil
}

type Upstream_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type upstreamUploadClient struct {
	grpc.ClientStream
}

func (x *upstreamUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upstreamUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpstreamServer is the server API for Upstream service.
type UpstreamServer interface {
	Upload(Upstream_UploadServer) error
}

func RegisterUpstreamServer(s *grpc.Server, srv UpstreamServer) {
	s.RegisterService(&_Upstream_serviceDesc, srv)
}

func _Upstream_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpstreamServer).Upload(&upstreamUploadServer{stream})
}

type Upstream_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type upstreamUploadServer struct {
	grpc.ServerStream
}

func (x *upstreamUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upstreamUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Upstream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Upstream",
	HandlerType: (*UpstreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Upstream_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "remote.proto",
}
